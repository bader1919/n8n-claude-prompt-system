{
    "Create Prompt Template": {
        "prefix": "createPromptTemplate",
        "body": [
            "/**",
            " * Create a new prompt template for ${1:use_case}",
            " */",
            "async function createPromptTemplate(templateConfig) {",
            "    const templateManager = new TemplateManager();",
            "    ",
            "    return await templateManager.createPromptTemplate({",
            "        name: '${2:template_name}',",
            "        category: '${3:business_operations}',",
            "        content: `You are a professional ${4:role} for {{company_name}}.",
            "        ",
            "        Context: {{context}}",
            "        Request: {{request}}",
            "        ",
            "        Please provide:",
            "        1. ${5:Clear solution}",
            "        2. ${6:Next steps}`,",
            "        variables: ['${7:company_name}', '${8:context}', '${9:request}']",
            "    });",
            "}"
        ],
        "description": "Create a new prompt template with n8n and Claude AI best practices"
    },
    "Inject Template Variables": {
        "prefix": "injectVariables",
        "body": [
            "/**",
            " * Inject variables into template content",
            " */",
            "const processedPrompt = templateManager.injectVariables(${1:templateContent}, {",
            "    ${2:customer_name}: ${3:$json.customer_name},",
            "    ${4:issue_description}: ${5:$json.issue},",
            "    ${6:priority_level}: ${7:$json.priority || 'Medium'},",
            "    ${8:company_name}: ${9:$env.COMPANY_NAME}",
            "});"
        ],
        "description": "Inject variables into template content using n8n workflow data"
    },
    "n8n Workflow Integration": {
        "prefix": "n8nWorkflow",
        "body": [
            "/**",
            " * Process n8n workflow data with Claude AI",
            " */",
            "async function processWorkflowData(workflowInput) {",
            "    const templateManager = new TemplateManager();",
            "    const claudeProvider = new ClaudeProvider(process.env.ANTHROPIC_API_KEY);",
            "    ",
            "    // Get template",
            "    const template = await templateManager.getTemplate(workflowInput.template_name);",
            "    ",
            "    // Inject variables",
            "    const prompt = templateManager.injectVariables(template.content, {",
            "        ${1:customer_name}: workflowInput.${2:customer_name},",
            "        ${3:issue_description}: workflowInput.${4:issue},",
            "        ${5:priority_level}: workflowInput.${6:priority} || 'Medium'",
            "    });",
            "    ",
            "    // Generate response",
            "    return await claudeProvider.generateCompletion(prompt, {",
            "        temperature: ${7:0.7},",
            "        maxTokens: ${8:1000}",
            "    });",
            "}"
        ],
        "description": "Complete n8n workflow integration pattern with template processing"
    },
    "Customer Support Response": {
        "prefix": "customerSupport",
        "body": [
            "/**",
            " * Generate customer support response",
            " */",
            "async function generateSupportResponse(customerData, issueData) {",
            "    const templateManager = new TemplateManager();",
            "    const claudeProvider = new ClaudeProvider(process.env.ANTHROPIC_API_KEY);",
            "    ",
            "    const template = await templateManager.getTemplate('business_operations/customer_support_template');",
            "    ",
            "    const variables = {",
            "        company_name: process.env.COMPANY_NAME,",
            "        customer_context: `${customerData.name} - ${customerData.tier} customer`,",
            "        customer_issue: issueData.description,",
            "        priority_level: issueData.priority,",
            "        account_type: customerData.tier,",
            "        tone: issueData.priority === 'Critical' ? 'urgent' : 'professional'",
            "    };",
            "    ",
            "    const prompt = templateManager.injectVariables(template.content, variables);",
            "    ",
            "    return await claudeProvider.generateCompletion(prompt, {",
            "        temperature: 0.3, // Lower for consistent support responses",
            "        maxTokens: 800",
            "    });",
            "}"
        ],
        "description": "Generate professional customer support responses with appropriate tone"
    },
    "API Generate Endpoint": {
        "prefix": "apiGenerate",
        "body": [
            "/**",
            " * Express route handler for template processing",
            " */",
            "app.post('/api/generate', async (req, res, next) => {",
            "    try {",
            "        const { template, variables, options } = req.body;",
            "        ",
            "        // Get template",
            "        const templateData = await templateManager.getTemplate(template);",
            "        ",
            "        // Process variables",
            "        const prompt = templateManager.injectVariables(templateData.content, variables);",
            "        ",
            "        // Generate response",
            "        const result = await claudeProvider.generateCompletion(prompt, options);",
            "        ",
            "        res.json({",
            "            success: true,",
            "            result: result.content,",
            "            usage: result.usage",
            "        });",
            "    } catch (error) {",
            "        next(error);",
            "    }",
            "});"
        ],
        "description": "Express route handler for AI completion generation"
    },
    "Template Validation": {
        "prefix": "validateTemplate",
        "body": [
            "/**",
            " * Validate template variables before processing",
            " */",
            "function validateTemplateVariables(template, providedVariables) {",
            "    const requiredVariables = template.variables || [];",
            "    const missing = requiredVariables.filter(variable => ",
            "        !(variable in providedVariables) || ",
            "        providedVariables[variable] === null || ",
            "        providedVariables[variable] === undefined",
            "    );",
            "    ",
            "    if (missing.length > 0) {",
            "        throw new ValidationError(`Missing required variables: ${missing.join(', ')}`);",
            "    }",
            "    ",
            "    return {",
            "        valid: true,",
            "        requiredVariables,",
            "        providedVariables: Object.keys(providedVariables)",
            "    };",
            "}"
        ],
        "description": "Validate template variables before processing"
    },
    "Content Generation": {
        "prefix": "generateContent",
        "body": [
            "/**",
            " * Generate content using Claude AI",
            " */",
            "async function generateContent(contentType, parameters) {",
            "    const templateManager = new TemplateManager();",
            "    const claudeProvider = new ClaudeProvider(process.env.ANTHROPIC_API_KEY);",
            "    ",
            "    const template = await templateManager.getTemplate(`content_creation/${contentType}`);",
            "    ",
            "    const prompt = templateManager.injectVariables(template.content, {",
            "        topic: parameters.topic,",
            "        target_audience: parameters.audience,",
            "        tone: parameters.tone || 'professional',",
            "        word_count: parameters.wordCount || '500-800'",
            "    });",
            "    ",
            "    return await claudeProvider.generateCompletion(prompt, {",
            "        model: 'claude-3-sonnet-20240229',",
            "        temperature: 0.8, // Higher for creative content",
            "        maxTokens: 2000",
            "    });",
            "}"
        ],
        "description": "Generate creative content with configurable parameters"
    }
}